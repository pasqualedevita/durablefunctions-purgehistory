# Azure DevOps pipeline for automating purge durable functions history.
# All files with .env in policies folder are applied.
# 
# The following parameter needs to be set to identify the Azure subscription :
# - SUBSCRIPTION: PROD-IO-SERVICE-CONN | DEV-IO-SERVICE-CONN
#
# The following pipeline parameters have to be setted for manual execution:
# - SUBSCRIPTION: service connection name
# - DRY_RUN: run pipeline without apply any changes

parameters:
  - name: 'SUBSCRIPTION'
    displayName: 'Select the Azure subscription for which purge durable function history'
    type: string
    default: DEV-SERVICE_PRINCIPAL-CONNECTION
    values:
      - DEV-SERVICE_PRINCIPAL-CONNECTION
      - PROD-IO-SERVICE-CONN
      - DEV-IO-SERVICE-CONN
      
  - name: 'DRY_RUN'
    displayName: 'Dry run (do not apply changes)'
    type: boolean
    default: false

variables:
  - name: 'DRY_RUN'
    value: '${{ parameters.DRY_RUN }}'

pool:
  vmImage: 'ubuntu-latest'

# The scheduled trigger will be set in the Azure DevOps portal
trigger: none
pr: none

jobs:
  - job: purge_df_history
    steps:
      # 1. Set the number of the run
      - task: PowerShell@2
        displayName: Update Run Number
        inputs:
          targetType: 'inline'
          script: '$id = "$(Build.BuildId)"; $date = Get-Date -Format "yyyy.MMdd"; Write-Host "##vso[build.updatebuildnumber]$date.$id"'

      # 2. Install the Azure Functions Core Tools our script will need
      - task: FuncToolsInstaller@0
        displayName: Install Azure Functions Core Tools

      # 3. Purge History
      - task: AzureCLI@2
        displayName: Purge History
        inputs:
          azureSubscription: '${{ parameters.SUBSCRIPTION }}'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          failOnStandardError: true
          inlineScript: |
            for policy in policies/*.env
            do
              [[ ! -e $policy ]] && continue  # continue, if file does not exist
              bash src/purge-history.sh ${policy}
            done
